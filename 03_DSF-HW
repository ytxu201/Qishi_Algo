//*
HW-01: find number of islands. all the neighbors. Using dsf
*/

class Solution{
public:
  int findIsland(vector<vector<charisland){
    int res = 0, m = island.size();
    if(!m) return res;
    int n = m.front().size();
    for(int i=0; i<m; ++i){
      for(int j=0; j<n; ++j){
        if(island[i][j] == '1') {
          dsf(island, i, j);
          ++res;
      }
    }
    return res;
  }
private:
  void dsf(vector<vector<char>>& g, int x, int y){
    if(x<0 || x>=g.size() || y<0 || y>=g.front().size() || g[x][y] != '1') return;
    g[x][y] = '-1';
    for(int i=-1; i<2; ++i){
      for(int j=-1; j<2; ++j){
        dsf(g, x+i, y+j);
      }
  }
};


/*
HW-02: 113. Path Sum II
*/

class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> res;
        vector<int> path;
        dsf(root, sum, res, path);
        return res;
    }
private:
    void dsf(TreeNode* r, int s, vector<vector<int>>& res, vector<int>& ps){
        if(!r) return;
        ps.push_back(r->val);
        if(!r->left && !r->right && s == r->val) res.push_back(ps);
        dsf(r->left, s - r->val, res, ps);
        dsf(r->right, s - r->val, res, ps);
        ps.pop_back();
    }
};


/*
HW-03: 105. Construct Binary Tree from Preorder and Inorder Traversal
*/

class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return dsf(preorder, 0, preorder.size(), inorder, 0, inorder.size());
    }
private:
    TreeNode* dsf(vector<int>& pre, int preleft, int preright, vector<int>& in, int inleft, int inright){
        if(preright == preleft) return NULL;
        int pos = inleft;
        while(pos<inright && in[pos] != pre[preleft]) ++pos;
        TreeNode* root = new TreeNode(pre[preleft]);
        root->left = dsf(pre, preleft+1, min(preleft + pos - inleft + 1, preright), in, inleft, pos);
        root->right = dsf(pre, min(preleft + pos - inleft + 1, preright), preright, in, pos+1, inright);
        return root;
    }
};


/*
HW-05: 329. Longest Increasing Path in a Matrix
*/

class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int res = 0, m = matrix.size();
        if(!m) return res;
        int n = matrix.front().size();
        vector<vector<int>> dp(m, vector<int>(n, 0));       
        for(int i=0; i<m; ++i){
            for(int j=0; j<n; ++j){
                res = max(res, dsf(matrix, i, j, dp));
            }
        }
        return res;
    }
private:
    int dsf(vector<vector<int>>& mx, int i, int j, vector<vector<int>>& dp){
        if(dp[i][j]) return dp[i][j];
        vector<int> dirs = {-1, 0, 1, 0, -1};
        int dis = 0;
        for(int k=0; k+1<dirs.size(); ++k){
            auto x = i + dirs[k], y = j + dirs[k+1];
            if(x<0 || x>=mx.size() || y<0 || y>=mx.front().size() || mx[x][y] <= mx[i][j]) continue;
            int a = dsf(mx, x, y, dp);
            dis = max(dis, a);
            if(a) dp[x][y] = a;
        }
        dp[i][j] = dis + 1;
        return dis + 1;
    }
};

/*
HW-05: 329. Longest Increasing Path in a Matrix
*/

class Solution {
public:
    int removeBoxes(vector<int>& boxes) {
        int n=boxes.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(n, vector<int>(n, 0)));
        return dfs(boxes,dp,0,n-1,0);
    } 
private:
    int dfs(vector<int>& boxes,vector<vector<vector<int>>>& dp, int l,int r,int k){
        if (l>r) return 0;
        if (dp[l][r][k]!=0) return dp[l][r][k];
        while (r>l && boxes[r]==boxes[r-1]) {r--;k++;}
            dp[l][r][k] = dfs(boxes,dp,l,r-1,0) + (k+1)*(k+1);
        for (int i=l; i<r; i++){
            if (boxes[i]==boxes[r]){
                dp[l][r][k] = max(dp[l][r][k], dfs(boxes,dp,l,i,k+1) + dfs(boxes,dp,i+1,r-1,0));
            }
        }
        return dp[l][r][k];
    }
};
