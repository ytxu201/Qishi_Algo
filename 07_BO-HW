/*
HW-01: 169. Majority Element
*/

class Solution {
public:
    int majorityElement(vector<int> &num) {
        int majority = 0;
        for (unsigned int i = 0, mask = 1; i < 32; i++, mask <<= 1) {
            int bits = 0;
            for (int nu : num) {
                if (nu & mask) {
                    bits++;
                }
            }
            if (bits > num.size() / 2) {
                majority |= mask;
            }
        }
        return majority;
    }
};


/*
HW-02: 231. Power of Two
*/

class Solution {
public:
    bool isPowerOfTwo(int n) {
        return n>0 && !(n & (n-1));
    }
};


/*
HW-03: 268. Missing Number
*/

class Solution {
public:
    int missingNumber(vector<int>& nums) {
        int res = 0;
        for(int i=1; i<=nums.size(); ++i){
            res ^= i ^ nums[i-1];
        }
        return res;
    }
};


/*
HW-04: 268. Missing Number
*/

class Solution {
public:
    bool isPowerOfFour(int num) {
        return num > 0 && !(num & (num-1)) && (num & 0b01010101010101010101010101010101);
    }
};


/*
HW-05: 318. Maximum Product ofWord Lengths
*/

class Solution {
public:
    int maxProduct(vector<string>& words) {
        int res = 0;
        vector<int> nums;
        for(auto &w : words) nums.push_back(word2Num(w));
        for(int i=0; i<nums.size(); ++i){
            int len1 = words[i].size();
            for(int j=i+1; j<nums.size(); ++j){
                int len2 = words[j].size();
                if(!(nums[i] & nums[j])) res = max(res, len1*len2);
            }
        }
        return res;
    }
private:
    int word2Num(string &w){
        int num = 0;
        for(auto &a : w){
            num |= 1<<(a-'a');
        }
        return num;
    }
};


/*
HW-06: 338. Counting Bits
*/

class Solution {
public:
    vector<int> countBits(int num) {
        vector<int> dp(num+1,0);
        for(int i=1; i<num+1; ++i) dp[i] = dp[i>>1] + (i&1);
        return dp;
    }
};


/*
HW-07: 397. Integer Replacement
*/






