/*
HW-01
LeetCode 744. Find Smallest Letter Greater Than Target
https://leetcode.com/problems/find-smallest-letter-greater-than-target/description/
*/

class Solution {
public:
    char nextGreatestLetter(vector<char>& letters, char target) {
        int left = 0, right = letters.size();
        while(left < right){
            int mid = left + (right - left)/2;
            if(letters[mid] <= target) left = mid + 1;
            else right = mid;
        }
        if(left == letters.size()) left = 0;
        return letters[left];
    }
};


/*
HW-02
475. Heaters
https://leetcode.com/problems/heaters/description/
*/

class Solution {
public:
    int findRadius(vector<int>& houses, vector<int>& heaters) {
        int res = 0;
        sort(heaters.begin(), heaters.end());
        for(auto a : houses){
            auto left = upper_bound(heaters.begin(), heaters.end(), a);
            if(left == heaters.begin()) res = max(res, *left - a);
            else if(left == heaters.end()) res = max(res, a - *(left-1));
            else res = max(res, min(*left - a, a - *(left - 1)));
        }
        return res;
    }
};


/*
HW-03
34. Find First and Last Position of Element in Sorted Array
https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/
*/

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        auto left = lower_bound(nums.begin(), nums.end(), target), right = upper_bound(nums.begin(), nums.end(), target);
        if(left == right) return {-1, -1};
        return {left - nums.begin(), right - nums.begin() - 1};
    }
};



/*
HW-04
162. Find Peak Element
https://leetcode.com/problems/find-peak-element/description/
*/

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int left = 0, right = nums.size() - 1;
        while(left < right){
            int mid = left + (right - left)/2;
            if(nums[mid] > nums[mid + 1]) right = mid;
            else left = mid + 1;
        }
        return left;
    }
};


/*
HW-05
719. Find K-th Smallest Pair Distance
https://leetcode.com/problems/find-k-th-smallest-pair-distance/description/
*/

class Solution {
public:
    int smallestDistancePair(vector<int>& nums, int k) {
        int res = 0;
        sort(nums.begin(), nums.end());
        int left = 0, right = nums.back() - nums.front();//bianry search to the difference range
        while(left < right){
            int mid = left + (right - left)/2;
            int i = 0, count = 0;
            for(int j=0; j<nums.size(); ++j){
                while(nums[j] - nums[i] > mid) ++i;
                count += j - i;
            }
            if(count >= k) right = mid;
            else left = mid + 1;
        }
        return left;
    }
};


/*
HW-06
有一条公路，长度是m, 中间有k个加油站，由此我们可以得到一个相邻加油站之间的最大距离，然后给你一个数t，这个数代表增加的加油站的数量（往里面插入），
求使得相邻加油站之间最大距离变得最小的值，返回这个最小的最大距离。
http://www.1point3acres.com/bbs/thread-212722-1-1.html
*/
Intuition:
1): for example, let's say the distances are 1, 2, 3, and 20, and t = 2. Obviously we will insert 2 gas stations uniformly into the 
last distance of 20, to cut it into three pieces with equal distance. (Thus, a greedy approach by inserting the gas station one by 
one into the middle of the largest distance will not work for this question.)
2): Binary search for the smallest value of the largest distance.
3): let say this smallest value is x, then there are n (n<=k+1) distances larger than x before insertion. And we have to 
make sure that after inserting t more gas stations, all the n distances will be cut into no larger distances than (<=) x. If any of 
them is equal to (ai)x + bi (ai>=1, and bi>=0 and bi<x), then we need to insert at least ai (or ai-1 when bi == 0) gas stations, to 
make sure the largest one generated is smaller than or equal to x. The sum of all ai should equal to t. If the sum is larger than t,
we need to adjust x value to be higher; otherwise, smaller.
4): since we are looking for the smallest value of the largest distance, it is equivalent to the lower_bound of binary search.


class Solution {
public:
    double smallestDistancePair(int m, vector<double>& gasStations, int t) {
        double res = 0.0, epsilon = 1e-6;
        vector<double> distances;
        int K = gasStations.size();//the number of inital gas station is k = K-2 due to two boundaries.
        //gasStaions contains the sorted coordinates of gasStations inlcudes the 0, and m, as well as all the coordinates of gas stations.
        for(int i=1; i<K; ++i){
            int a = gasStations[i] - gasStations[i-1];
            distances.push_back(a);
        }
        sort(distances.begin(), distances.end());
        double left = ((double) m)/((double)(K+t-1)), right = distances.back();//bianry search to the limiting distance x.
        //left is the possible smallest distance, and right is the possible largest distance.
        while(left < right){
            double mid = left + (right - left)/2.0;
            int i = 0, count = 0, int j = upper_bound(distances.begin(), distances.end(), mid) - distances.begin();
            for(; j<distances.size(); ++j){
                int a = (int) distances[j]/mid;
                if(distances[j]-a*mid <= epsilon) count += a - 1;//need to insert (a-1).
                else count += a;
                if(count > t) break;//no need to scan more.
            }
            if(count > t) left = mid + 0.5;//need more than t gas stations, thus we need to increase x or mid here.
            else right = mid;
        }
        res = left;
        return res;
    }
};
