/*
HW-01    207. Course Schedule
*/

class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<vector<int>> gh(numCourses);
        vector<int> ghin(numCourses, 0);
        for(auto a : prerequisites){
            gh[a.second].push_back(a.first);
            ++ghin[a.first];
        }
        int res = 0;
        dsf(gh, ghin, res);
        return res == numCourses;
    }
private:
    void dsf(vector<vector<int>>& gh, vector<int>& ghin, int &res){
        stack<int> q;
        int len = ghin.size();
        for(int i=0; i<len; ++i){
            if(ghin[i] == 0) q.push(i);
        }
        while(!q.empty()){
            auto t = q.top();
            q.pop();
            ++res;
            for(auto i : gh[t]){
                if(--ghin[i] == 0) q.push(i);
            }
        }
    }
};


/*
HW-02    210. Course Schedule II
*/

class Solution {
public:
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<int> res;
        vector<vector<int>> graph(numCourses, vector<int>(0));
        vector<int> in(numCourses, 0);
        for(auto &a: prerequisites){
            graph[a.second].push_back(a.first);
            ++in[a.first];
        }
        queue<int> q;
        for(int i=0; i<numCourses; ++i){
            if(in[i]==0) q.push(i);
        }
        while(!q.empty()){
            int t=q.front();
            res.push_back(t);
            q.pop();
            for(auto &a:graph[t]){
                --in[a];
                if(in[a]==0) q.push(a);
            }
        }
        if(res.size()!=numCourses) res.clear();
        return res;
    }
};


/*
HW-03    444 Sequences reconstruction
*/

class Solution {
public:
    bool sequenceReconstruction(vector<int>& org, vector<vector<int>>& seqs) {
        unordered_map<int, unordered_set<int>> gh;
        unordered_map<int, int> indegree;
        for (auto& s : seqs){//build a gh
            for (int i = 0; i < s.size(); ++i){
                gh[s[i]];
                if (i + 1 < s.size()){//elements before the last one
                    if (gh[s[i]].count(s[i+1])==0)
                        indegree[s[i + 1]] += 1;
                    gh[s[i]].insert(s[i + 1]);
                    gh[s[i + 1]];
                }
            }
        }
        if (gh.size() != org.size()) return false;
        queue<int> q;
        vector<int> res;
        for (auto a : gh){
            if (indegree[a.first] == 0){
                q.push(a.first);
                res.push_back(a.first);
            }
        }
        if (res.size() != 1) return false;//only one path
        while (!q.empty()){
            if(q.size()!=1) return false;//only one path
            int cur = q.front();
            q.pop();
            for (auto nxt : gh[cur]){
                indegree[nxt] -= 1;
                if (indegree[nxt] == 0){
                    q.push(nxt);
                    res.push_back(nxt);
                }
            }
        }
        return res == org;
    }
};


/*
HW-04    269 Alien Dictionary
*/

class Solution {
public:
    string alienOrder(vector<string>& words) {
        set<pair<char, char>> st;
        unordered_set<char> ch;
        vector<int> in(256, 0);
        queue<char> q;
        string res = "";
        for (auto a : words) ch.insert(a.begin(), a.end());//collect all the chars;
        for (int i = 0; i < (int)words.size() - 1; ++i) {//build the order in pairs;
            int mn = min(words[i].size(), words[i + 1].size()), j = 0;
            for (; j < mn; ++j) {
                if (words[i][j] != words[i + 1][j]) {
                    st.insert(make_pair(words[i][j], words[i + 1][j]));
                    break;
                }
            }
            if (j == mn && words[i].size() > words[i + 1].size()) return "";//one corner case: all the same but length.
        }
        for (auto a : st) ++in[a.second];
        for (auto a : ch) {
            if (in[a] == 0) {
                q.push(a);
                res += a;
            } 
        }
        while (!q.empty()) {
            char c = q.front(); q.pop();
            for (auto a : st) {
                if (a.first == c) {
                    --in[a.second];
                    if (in[a.second] == 0) {
                        q.push(a.second);
                        res += a.second;
                    }
                }
            }
        }
        return res.size() == ch.size() ? res : "";
    }
};
