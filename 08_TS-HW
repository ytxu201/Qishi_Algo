/*
HW-01    207. Course Schedule
*/

class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<vector<int>> gh(numCourses);
        vector<int> ghin(numCourses, 0);
        for(auto a : prerequisites){
            gh[a.second].push_back(a.first);
            ++ghin[a.first];
        }
        int res = 0;
        dsf(gh, ghin, res);
        return res == numCourses;
    }
private:
    void dsf(vector<vector<int>>& gh, vector<int>& ghin, int &res){
        stack<int> q;
        int len = ghin.size();
        for(int i=0; i<len; ++i){
            if(ghin[i] == 0) q.push(i);
        }
        while(!q.empty()){
            auto t = q.top();
            q.pop();
            ++res;
            for(auto i : gh[t]){
                if(--ghin[i] == 0) q.push(i);
            }
        }
    }
};


/*
HW-02    210. Course Schedule II
*/

class Solution {
public:
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<int> res;
        vector<vector<int>> graph(numCourses, vector<int>(0));
        vector<int> in(numCourses, 0);
        for(auto &a: prerequisites){
            graph[a.second].push_back(a.first);
            ++in[a.first];
        }
        queue<int> q;
        for(int i=0; i<numCourses; ++i){
            if(in[i]==0) q.push(i);
        }
        while(!q.empty()){
            int t=q.front();
            res.push_back(t);
            q.pop();
            for(auto &a:graph[t]){
                --in[a];
                if(in[a]==0) q.push(a);
            }
        }
        if(res.size()!=numCourses) res.clear();
        return res;
    }
};


/*
HW-03    210. Course Schedule II
*/



