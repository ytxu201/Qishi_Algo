/*
HW-01 LeetCode 139 Word Break
*/

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        vector<bool> dp(s.size()+1, false);
        unordered_map<string, int> mp;
        for(auto &a : wordDict) ++mp[a];
        dp[0] = true;
        for(int i=1; i<=s.size(); ++i){
            for(int j=1; j<=i; ++j){
                if(dp[j-1] && mp.count(s.substr(j-1, i-j+1))){
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[s.size()];
    }
};


/*
HW-02 LeetCode 300 Longest Increasing Subsequence
*/

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int len = nums.size();
        if(!len) return 0;
        int res = 1;
        vector<int> dp(len, 1);
        for(int i=1; i<len; ++i){
            for(int j=0; j<i; ++j){
                if(nums[j] < nums[i]) dp[i] = max(dp[i], dp[j] + 1);
            }
            res = max(res, dp[i]);
        }
        return res;
    }
};


/*
HW-03 LeetCode 72 Edit Distance
*/

class Solution {
public:
    int minDistance(string word1, string word2) {
        int len1=word1.size(), len2=word2.size();
        vector<vector<int>> dp(len1+1, vector<int>(len2+1, 0));
        for(int i=0; i<=len1; ++i) dp[i][0] = i;
        for(int i=0; i<=len2; ++i) dp[0][i] = i;
        for(int i=1; i<=len1; ++i){
            for (int j=1; j<=len2; ++j){
                if(word1[i-1] == word2[j-1]) dp[i][j] = dp[i-1][j-1];
                else dp[i][j] = min(dp[i-1][j-1], min(dp[i-1][j], dp[i][j-1])) + 1;
            }
        }
        return dp[len1][len2];
    }
};


/*
HW-04 LeetCode 416 Partition Equal Subset Sum
*/

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        for(auto &a : nums) sum += a;
        if(sum%2 != 0) return false;
        sum /= 2;
        int len = nums.size();
        vector<vector<bool>> dp(sum+1, vector<bool>(len+1, false));
        for(int i=0; i<=len; ++i) dp[0][i] = true;
        sort(nums.begin(), nums.end());
        for(int i=1; i<=sum; ++i){
            for(int j=1; j<=len; ++j){
                if(i-nums[j-1] >= 0) dp[i][j] = dp[i][j-1] || dp[i-nums[j-1]][j-1];
                else dp[i][j] = dp[i][j-1];
            }
        }
        return dp[sum][len];
    }
};


/*
HW-05 LeetCode 322 Coin Change
*/

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        //dp[i] = min(dp[i-coins[j]]) + 1;
        sort(coins.begin(), coins.end());
        vector<int> dp(amount+1, amount+1);
        dp[0] = 0;
        for(int i=0; i<=amount; ++i){
            for(int j=0; j<coins.size(); ++j){
                if(i<coins[j]) break; 
                if(dp[i] > dp[i-coins[j]] + 1) dp[i] = dp[i-coins[j]] + 1;
            }
        }
        return dp[amount] == amount + 1 ? -1 : dp[amount];
    }
};
